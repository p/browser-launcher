#!/usr/bin/env ruby

require 'optparse'

args = ARGV.dup
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: fox-profile option..."

  opts.on("-b", "--binary=PATH", "Launch the binary at PATH (default: firefox)") do |v|
    if v.include?('/')
      Utils.verify_path_exists(v, 'binary')
    else
      # TODO locate the binary in PATH, warn/error if missing
    end
    options[:binary_path] = v
  end

  opts.on("--dump-cookies", "Dump cookies") do
    options[:dump_cookies] = true
  end

  opts.on("-e", "--export=PATH", "Export current session to PATH") do |value|
    options[:export_session] = value
  end

  opts.on("-l", "--list", "List available profiles") do
    options[:list_profiles] = true
  end

  opts.on("-p", "--profile=PATH", "Name of the profile to operate on") do |value|
    options[:profile] = value
  end

  opts.on("-P", "--profile-path=PATH", "Path to the profile") do |value|
    options[:profile_path] = value
  end

  opts.on("-s", "--save-session=PATH", "Save current session to PATH") do |value|
    options[:save_session] = value
  end

  opts.on("-u", "--user=USER", "Operate on profiles of this user") do |v|
    options[:user] = v
  end
end.parse!(args)

$: << File.join(File.dirname(__FILE__), '../lib')

if target_user = options[:user]
  require 'browser_launcher/utils'

  if BrowserLauncher::Utils.current_user != target_user
    BrowserLauncher::Utils.reexec_as_user(target_user)
  end
end

require 'browser_launcher/fox/profile_manager'

BrowserLauncher::Fox::ProfileManager.new(**options).run
